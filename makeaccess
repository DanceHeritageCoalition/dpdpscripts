#!/bin/bash
# makeyoutube, makes a file appropriate for uploading to youtube
# 1.1: use 4/3dar 1/1sar
VERSION="1.1"
SCRIPTDIR=$(dirname $(which "$0"))
. "$SCRIPTDIR/mmfunctions" || { echo "Missing '$SCRIPTDIR/mmfunctions'. Exiting." ; exit 1 ;};
DEPENDENCIES=(ffmpeg)
_initialize_make

usage(){
    echo
    echo "$(basename ${0}) ${VERSION}"
    echo "This application will create a high quality h264 file from a video file or package input with the following options."
    echo "Dependencies: ${DEPENDENCIES[@]}"
    echo "Usage: $(basename $0) [ -d /path/to/deliver/to/ ] fileorpackage1 [ fileorpackage2 ...]"
    echo "  -d directory ( directory to deliver the resulting file to )"
    echo "  -o directory ( directory to write the resulting file to )"
    echo "  -n (dry-run mode, show the commands that would be run but don't do anything)"
    echo "  -e emailaddress ( send an email about the delivery, only valid if -d is used )"
    echo "  -E emailaddress ( send an email about process outcome )"
    echo "  -h ( display this help )"
    echo
    exit
}
[ "${#}" = 0 ] && usage

# command-line options to set mediaid and original variables
OPTIND=1
while getopts ":o:d:e:E:nh" opt ; do
    case "${OPT}" in
        o) OUTPUTDIR_FORCED="$OPTARG" && _check_outputdir_forced ;;
        d) deliverdir="$OPTARG" && check_deliverdir ;;
        e) emailaddress_delivery="$OPTARG" ;;
        E) emailaddress_outcome="$OPTARG" ;;
        n) DRYRUN=true;;
        h) usage ;;
        *) echo "bad option -$OPTARG" ; usage ;;
        :) echo "Option -$OPTARG requires an argument" ; exit 1 ;;
    esac
done
shift $(( ${OPTIND} - 1 ))

[ "${EMAILADDRESS_OUTCOME}" ] && check_emailaddress "${EMAILADDRESS_OUTCOME}"
[ "${EMAILADDRESS_DELIVERY}" ] &&  check_emailaddress "${EMAILADDRESS_DELIVERY}"

while [ "${*}" != "" ] ; do
    # get context about the input
    INPUT="$1"
    if [ -z "${OUTPUTDIR_FORCED}" ] ; then
        [ -d "${INPUT}" ] && { OUTPUTDIR="${INPUT}/objects/access" && LOGDIR="${INPUT}/metadata/submissionDocumentation/logs" ;};
        [ -f "${INPUT}" ] && { OUTPUTDIR=$(dirname "${INPUT}")"/access" && LOGDIR="$(dirname "${INPUT}")/access/logs" ;};
        [ ! "${OUTPUTDIR}" ] && { OUTPUTDIR="${INPUT}/objects/access" && LOGDIR="${INPUT}/metadata/submissionDocumentation/logs" ;};
    else
        OUTPUTDIR="${OUTPUTDIR_FORCED}"
        LOGDIR="${OUTPUTDIR}/logs"
    fi
    _unset_variables
    _find_input "${INPUT}"
    MEDIAID=$(basename "${INPUT}" | cut -d. -f1)

    # set up output
    _log -b
    OUTPUT="${OUTPUTDIR}/${MEDIAID%.*}.mp4"
    [ -s "${OUTPUT}" ] && { _report -wt "WARNING ${OUTPUT} already exists, skipping transcode" ; shift ; continue ;};
    _run mkdir -p "${OUTPUTDIR}"

    # get information on the input
    _get_height "${SOURCEFILE}"
    _get_width "${SOURCEFILE}"
    _get_dar "${SOURCEFILE}"
    _get_videostreamcount "${SOURCEFILE}"
    _get_audiostreamcount "${SOURCEFILE}"

    # clear local arrays
    unset INPUTOPTIONS
    unset MIDDLEOPTIONS

    # encoding options
    INPUTOPTIONS+=(-vsync 0 -nostdin)
    if [[ "${VIDEOSTREAMCOUNT}" > 0 ]] ; then
        MIDDLEOPTIONS+=(-movflags faststart)
        MIDDLEOPTIONS+=(-pix_fmt yuv420p)
        MIDDLEOPTIONS+=(-c:v libx264)
        MIDDLEOPTIONS+=(-b:v 750k)
        if [ $(echo "scale=3 ; $DAR > (3/2)" | bc -l) = 1 ] ; then
            MIDDLEOPTIONS+=(-vf "yadif,scale=854:480,setsar=1/1,setdar=16/9")
        elif  [ "${HEIGHT}" -eq "486" -a "${WIDTH}" -eq "720" ] ; then
            MIDDLEOPTIONS+=(-vf "crop=720:480:0:4,yadif,scale=640:480,setsar=1/1,setdar=4/3")
        elif  [ "${HEIGHT}" -eq "512" -a "${WIDTH}" -eq "720" ] ;then
            MIDDLEOPTIONS+=(-vf "crop=720:480:0:32,yadif,scale=640:480,setsar=1/1,setdar=4/3")
        else
            MIDDLEOPTIONS+=(-vf "yadif,scale=640:480,setsar=1/1,setdar=4/3")
        fi
    fi
    if [[ "${AUDIOSTREAMCOUNT}" > 0 ]] ; then
        MIDDLEOPTIONS+=(-c:a aac -strict -2)
        MIDDLEOPTIONS+=(-ac 2)
        MIDDLEOPTIONS+=(-b:a 128k)
    fi
    MIDDLEOPTIONS+=(-f mp4)

    # set in and out times if used
    INGESTLOG="${LOGDIR}/capture.log"
    if [ -f "${INGESTLOG}" -a "${ISOBJECT}" = "Y" ] ; then
       intime=$(_readingestlog "intime")
       outtime=$(_readingestlog "outtime")
       if [[ "${INTIME}" ]] ; then
           _report -dt "ATTENTION: Transcoding will use intime (${INTIME}) during transcoding."
           START_TIME=$(ffprobe "${SOURCEFILE}" -show_entries format=START_TIME -of compact | cut -d= -f2)
           INTIME_ADJ=$(echo "$INTIME - $START_TIME" | bc)
           if [[ "${INTIME_ADJ:0:1}" = "." ]] ; then
               INTIME_ADJ="0${INTIME_ADJ}"
           fi
           MIDDLEOPTIONS+=(-ss "${INTIME_ADJ}")
       fi
       if [[ "${OUTTIME}" ]] ; then
           _report -dt "ATTENTION: Transcoding will use outtime (${OUTTIME}) during transcoding."
           MIDDLEOPTIONS+=(-to "${OUTTIME}")
       fi
    fi

    _get_audio_mapping "${SOURCEFILE}"
    MIDDLEOPTIONS+=(${AUDIOMAPPING_FFMPEG[@]})

    _prep_ffmpeg_log
    _run_critical ffmpeg ${INPUTOPTIONS[@]} "${FFMPEGINPUT[@]}" ${MIDDLEOPTIONS[@]} "${OUTPUT}"
    echo
    _summarize_make
    _deliver_output
    
    shift
    _log -e
done
